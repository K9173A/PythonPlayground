"""
Расстояние Левенштейна (Редакционное расстояние) - способ понять, насколько похожи две строки.
Расстояние вычисляется как количество операций редактирования строки:
- замена исходной буквы на целевую букву;
- удаление исходной буквы;
- добавление целевой буквы.
Каждая такая операция оценивается стандартно в +1, но можно делать и кастомные веса для каждой
операции.
"""
import functools


def levenshtein_distance(left: str, right: str) -> int:
    """
    Рассчитывает редакционное расстояние.
    :param left: первая строка.
    :param right: вторая стрка.
    :return: редакционное расстояние.
    """
    @functools.lru_cache(maxsize=len(left) * len(right))
    def distance(left_index: int, right_index: int) -> int:
        """
        Итерация в вычислениях редакционного расстояния.
        По переданным индексам букв в левой и правой строк проверяем соответствующие им буквы.
        Если буквы разные, то выбирается минимальное значение от рекурсивного вызова этой же функции
        для кейсов с удалением, вставкой и заменой буквы.
        :param left_index: текущий индекс символа в левой строке.
        :param right_index: текущий индекс символа в правой строке.
        :return: редакционное расстояние.
        """
        # Кейс, где одна из строк пустая (или обе), тогда расстояние будет равно
        # длине другой строки, т.е. количество вставок будет равно длине строки.
        if left_index == 0 or right_index == 0:
            return max(left_index, right_index)

        # Если символы одинаковые, то идём дальше. # Расстояние при этом не меняется.
        elif left[left_index - 1] == right[right_index - 1]:
            return distance(left_index - 1, right_index - 1)

        # Основной кейс. Выбирается минимальный вариант из трёх: удаление, вставка, замена.
        else:
            return min(
                # Удаление: у левой строки остаёмся на прежнем месте, а у правой строки
                # смещаемся на одну позицию влево, что как раз и онзначает, что мы "удалили"
                # символ и дальше пошли (но на самом деле мы не удаляли).
                distance(left_index, right_index - 1),
                # Вставка: у правой строк добавился новый символ, поэтому у левой сдвигаемся
                # на одну позицию влево.
                distance(left_index - 1, right_index),
                # Замена: в обеих строках идём дальше.
                distance(left_index - 1, right_index - 1)
            ) + 1

    return distance(len(left), len(right))


if __name__ == '__main__':
    print(levenshtein_distance('aaa', 'bb'))
