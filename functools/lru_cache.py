import functools

# LRU (Lease Recently Used) - позволяет сохранить время для функций, которые с некоторой периодичностью
# вызываются с одними и теми же аргументами.
# maxsize - число, определяющее количество последних вызовов, результаты которых будут в кэше.
# typed - хранение отдельно кэша для аргументов с одинаковыми значениями но разных типов (напр. f(3) и f(3.0)).


@functools.lru_cache(maxsize=10)
def fibonacci(n):
    if n < 2:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)


if __name__ == '__main__':
    # Вычисление ряда Фибоначчи для первых 20 чисел.
    for i in range(20):
        print(fibonacci(i))

    # Выводит tuple с информацией по кэшу:
    # hits - "попадания" - количество корректно подставленных кэшированных значений.
    # misses - "промахи" - количество некорректно подставленных кэшированных значений.
    # maxsize - максимальное количество записей в кэше. Совпадает с тем, что указано в декораторе.
    # currsize - текущее количество записей в кэше.
    print(fibonacci.cache_info())
    # Сброс кэша, который имелся у функции на текущий момент.
    fibonacci.cache_clear()
    # Теперь все значения (кроме maxsize) будут равны 0.
    print(fibonacci.cache_info())
